name: Create Release PR

on:
  pull_request:
    branches:
      - main
    paths:
      - '.github/**'
      - 'src/Dockerfile'

permissions:
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release-process:
    name: Release Process
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
      - name: Process Dependabot Pull Request
        run: |
          # Approve and merge the Dependabot PR automatically
          gh pr review --approve ${{ github.event.pull_request.html_url }}
          gh pr edit --add-label "auto-merged" "${{ github.event.pull_request.html_url }}"
          gh pr merge --merge "${{ github.event.pull_request.html_url }}"

      - name: Get dependency update metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2.2.0

      - name: Verify Release Type
        id: check
        run: |
          # Only proceed with release process for Docker updates
          if [ "${{ steps.metadata.outputs.package-ecosystem }}" = "docker" ]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Repository
        if: steps.check.outputs.is_release == 'true'
        uses: actions/checkout@v4.2.2
        with:
          ref: main
          fetch-depth: 0

      - name: Determine Package Version
        if: steps.check.outputs.is_release == 'true'
        id: get-version
        run: |
          # Try to get version from metadata, fallback to API if not available
          VERSION="${{ steps.metadata.outputs.new-version }}"
          
          if [ -z "$VERSION" ]; then
            VERSION=$(gh api repos/${{ steps.metadata.outputs.dependency-names }}/releases/latest --jq .tag_name)
          fi
          
          echo "package_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update Version and Changelog
        if: steps.check.outputs.is_release == 'true'
        id: bump
        run: |
          # Get current version from config
          CURRENT_VERSION=$(grep "version:" src/config.yaml | sed 's/.*: "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Calculate new version (minor bump)
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          NEW_MINOR=$((MINOR + 1))
          ADDON_VERSION="$MAJOR.$NEW_MINOR"
          echo "addon_version=$ADDON_VERSION" >> $GITHUB_OUTPUT
          
          # Update files with new version
          sed -i "s/version: .*/version: \"$ADDON_VERSION\"/" src/config.yaml
          
          # Prepend new changelog entry
          NEW_ENTRY="# $ADDON_VERSION\n- Update ${{ steps.metadata.outputs.dependency-names }} to ${{ steps.get-version.outputs.package_version }}\n"
          echo -e "$NEW_ENTRY$(cat src/CHANGELOG.md)" > src/CHANGELOG.md

      - name: Commit Changes
        if: steps.check.outputs.is_release == 'true'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit and push changes
          git add src/config.yaml src/CHANGELOG.md
          git commit -m "Bump version to ${{ steps.bump.outputs.addon_version }}"
          git push

      - name: Generate Commit History
        if: steps.check.outputs.is_release == 'true'
        id: get-commits
        run: |
          # Get commit history since last release
          git fetch origin release:release --no-tags
          LAST_RELEASE_COMMIT=$(git merge-base main release)
          COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_RELEASE_COMMIT..main)
          
          # Format output for GitHub Actions
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "commits<<$EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Create Release Pull Request
        if: steps.check.outputs.is_release == 'true'
        run: |
          # Prepare PR description
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          PR_BODY=$(cat <<$EOF
          ## Automated Release Update
          
          ### Version: ${{ steps.bump.outputs.addon_version }}
          
          ### Dependency Updates
          - Package: ${{ steps.metadata.outputs.dependency-names }}
          - Updated Version: ${{ steps.get-version.outputs.package_version }}
          
          ### Commits
          ${{ steps.get-commits.outputs.commits }}
          $EOF
          )
          
          # Create pull request
          gh pr create \
            --base release \
            --head main \
            --title "Release: ${{ steps.bump.outputs.addon_version }}" \
            --body "$PR_BODY" \
            --reviewer "Eskander" \
            --assignee "Eskander" \
            --label "release"

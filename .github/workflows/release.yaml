name: Release

on:
  pull_request:
    types:
      - closed

env:
  WATCH_PACKAGE: "justarchinet/archisteamfarm"

jobs:
  version-bump:
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.title, github.env.WATCH_PACKAGE)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.extract.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Extract versions and package info
        id: extract
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Extract current version from config.yaml
          CURRENT_VERSION=$(grep "version:" src/config.yaml | sed 's/.*: "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Calculate new version (bump minor)
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Extract package version from PR title - everything between "to" and "in /src"
          PACKAGE_VERSION=$(echo "$PR_TITLE" | sed -n 's/.*to \(.*\) in \/src.*/\1/p')
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in config.yaml
        run: |
          sed -i 's/version: ".*"/version: "${{ steps.extract.outputs.new_version }}"/' src/config.yaml

      - name: Update CHANGELOG.md
        env:
          NEW_VERSION: ${{ steps.extract.outputs.new_version }}
          PACKAGE_VERSION: ${{ steps.extract.outputs.package_version }}
        run: |
          # Prepare new entry with the specified format
          NEW_ENTRY="# ${NEW_VERSION}\n- Update ${WATCH_PACKAGE} to ${PACKAGE_VERSION}\n"
          
          # Prepend new entry to CHANGELOG.md
          echo -e "$NEW_ENTRY$(cat src/CHANGELOG.md)" > src/CHANGELOG.md

      - name: Setup GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Commit and push changes
        run: |
          git add src/config.yaml src/CHANGELOG.md
          git commit -m "Bump version to ${{ steps.extract.outputs.new_version }}"
          git push

  create-pr:
    needs: version-bump
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Get commit list
        id: get-commits
        run: |
          # Fetch release branch
          git fetch origin release:release --no-tags
          
          # Get the last commit that was merged to release
          LAST_RELEASE_COMMIT=$(git merge-base main release)
          
          # Get all commits between last release and current main
          COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_RELEASE_COMMIT..main)
          
          # Properly handle multiline output for GitHub Actions
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "commits<<$EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --base release \
            --head main \
            --title "Update ${{ needs.version-bump.outputs.new_version }}" \
            --body "This PR updates the release branch to version ${{ needs.version-bump.outputs.new_version }}.
            
            ## Commits included in this release:
            ${{ steps.get-commits.outputs.commits }}" \
            --reviewer "Eskander" \
            --assignee "Eskander")
          
          echo "Created PR: $PR_URL"
